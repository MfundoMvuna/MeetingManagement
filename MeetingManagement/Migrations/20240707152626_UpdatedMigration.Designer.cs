// <auto-generated />
using System;
using MeetingManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingManagement.Migrations
{
    [DbContext(typeof(MeetingContext))]
    [Migration("20240707152626_UpdatedMigration")]
    partial class UpdatedMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeetingManagement.Model.Meeting", b =>
                {
                    b.Property<int>("MeetingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingID");

                    b.HasIndex("MeetingTypeID");

                    b.ToTable("Meeting", (string)null);
                });

            modelBuilder.Entity("MeetingManagement.Model.MeetingItems", b =>
                {
                    b.Property<int>("MeetingItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingItemID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingID")
                        .HasColumnType("int");

                    b.Property<string>("PersonResponsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingItemID");

                    b.HasIndex("MeetingID");

                    b.ToTable("MeetingItems", (string)null);
                });

            modelBuilder.Entity("MeetingManagement.Model.MeetingType", b =>
                {
                    b.Property<int>("MeetingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingTypeID"));

                    b.Property<string>("MeetingTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingTypeID");

                    b.ToTable("MeetingType", (string)null);
                });

            modelBuilder.Entity("MeetingManagement.Model.Status", b =>
                {
                    b.Property<int>("MeetingItemStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingItemStatusID"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingItemID")
                        .HasColumnType("int");

                    b.Property<string>("ResponsiblePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingItemStatusID");

                    b.HasIndex("MeetingItemID")
                        .IsUnique();

                    b.ToTable("Status", (string)null);

                    b.HasData(
                        new
                        {
                            MeetingItemStatusID = 1,
                            ActionRequired = "None",
                            MeetingItemID = 1,
                            ResponsiblePerson = "Manager",
                            StatusDescription = "Open"
                        },
                        new
                        {
                            MeetingItemStatusID = 2,
                            ActionRequired = "Complete the task",
                            MeetingItemID = 2,
                            ResponsiblePerson = "Manager",
                            StatusDescription = "Closed"
                        });
                });

            modelBuilder.Entity("MeetingManagement.Model.Meeting", b =>
                {
                    b.HasOne("MeetingManagement.Model.MeetingType", "MeetingType")
                        .WithMany()
                        .HasForeignKey("MeetingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingType");
                });

            modelBuilder.Entity("MeetingManagement.Model.MeetingItems", b =>
                {
                    b.HasOne("MeetingManagement.Model.Meeting", "Meeting")
                        .WithMany("MeetingItems")
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("MeetingManagement.Model.Status", b =>
                {
                    b.HasOne("MeetingManagement.Model.MeetingItems", "MeetingItem")
                        .WithOne("Status")
                        .HasForeignKey("MeetingManagement.Model.Status", "MeetingItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingItem");
                });

            modelBuilder.Entity("MeetingManagement.Model.Meeting", b =>
                {
                    b.Navigation("MeetingItems");
                });

            modelBuilder.Entity("MeetingManagement.Model.MeetingItems", b =>
                {
                    b.Navigation("Status")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
